/* esm.sh - esbuild bundle(gh/lowlighter/libs@8b04ac396f/xml/mod.ts) es2022 production */
var u = Object.defineProperty; var E = (A, I) => u(A, "name", { value: I, configurable: !0 }); var BA = (A, I) => { for (var B in I) u(A, B, { get: I[B], enumerable: !0 }) }; var x = {}; BA(x, { cdata: () => _, comment: () => P, parse: () => v, stringify: () => O }); var s, F = new Array(128).fill(void 0); function e (A) { return F[A] } E(e, "g"); F.push(void 0, null, !0, !1); var r = F.length; function y (A) { r === F.length && F.push(F.length + 1); let I = r; return r = F[I], F[I] = A, I } E(y, "Q"); function QA (A) { let I = e(A); return function (B) { B < 132 || (F[B] = r, r = B) }(A), I } E(QA, "C"); var W = typeof TextDecoder < "u" ? new TextDecoder("utf-8", { ignoreBOM: !0, fatal: !0 }) : { decode: () => { throw Error("TextDecoder not available") } }; typeof TextDecoder < "u" && W.decode(); var n = null; function J () { return n !== null && n.byteLength !== 0 || (n = new Uint8Array(s.memory.buffer)), n } E(J, "w"); function p (A, I) { return A >>>= 0, W.decode(J().subarray(A, A + I)) } E(p, "i"); function k (A) { return A == null } E(k, "G"); var M = null, R = null; function L () { return R !== null && R.byteLength !== 0 || (R = new Int32Array(s.memory.buffer)), R } E(L, "y"); function l (A) {
  let I = typeof A; if (I == "number" || I == "boolean" || A == null) return `${A}`; if (I == "string") return `"${A}"`; if (I == "symbol") { let Q = A.description; return Q == null ? "Symbol" : `Symbol(${Q})` } if (I == "function") { let Q = A.name; return typeof Q == "string" && Q.length > 0 ? `Function(${Q})` : "Function" } if (Array.isArray(A)) { let Q = A.length, C = "["; Q > 0 && (C += l(A[0])); for (let D = 1; D < Q; D++)C += ", " + l(A[D]); return C += "]", C } let B = /\[object ([^\]]+)\]/.exec(toString.call(A)), g; if (!(B.length > 1)) return toString.call(A); if (g = B[1], g == "Object") try { return "Object(" + JSON.stringify(A) + ")" } catch { return "Object" } return A instanceof Error ? `${A.name}: ${A.message}
${A.stack}` : g
} E(l, "F"); var U = 0, Y = typeof TextEncoder < "u" ? new TextEncoder("utf-8") : { encode: () => { throw Error("TextEncoder not available") } }, CA = typeof Y.encodeInto == "function" ? function (A, I) { return Y.encodeInto(A, I) } : function (A, I) { let B = Y.encode(A); return I.set(B), { read: A.length, written: B.length } }; function j (A, I, B, g) { (function (C, D) { if (!(C instanceof D)) throw new Error(`expected instance of ${D.name}`); C.ptr })(A, S); var Q = A.__destroy_into_raw(); s.tokenize(Q, y(I), y(B), k(g) ? 16777215 : g ? 1 : 0) } E(j, "c"); function Z (A, I) { try { return A.apply(this, I) } catch (B) { s.__wbindgen_exn_store(y(B)) } } E(Z, "Y"); var G = Object.freeze({ Error: 0, 0: "Error", XMLDeclaration: 1, 1: "XMLDeclaration", XMLDoctype: 2, 2: "XMLDoctype", XMLInstruction: 3, 3: "XMLInstruction", TagOpen: 4, 4: "TagOpen", TagClose: 5, 5: "TagClose", TagAttribute: 6, 6: "TagAttribute", Text: 7, 7: "Text", CData: 8, 8: "CData", Comment: 9, 9: "Comment", StateParseAttribute: 129, 129: "StateParseAttribute" }), EA = typeof FinalizationRegistry > "u" ? { register: () => { }, unregister: () => { } } : new FinalizationRegistry(A => s.__wbg_jsreader_free(A >>> 0)), S = class { static { E(this, "k") } __destroy_into_raw () { let A = this.__wbg_ptr; return this.__wbg_ptr = 0, EA.unregister(this), A } free () { let A = this.__destroy_into_raw(); s.__wbg_jsreader_free(A) } constructor (A, I) { let B = s.jsreader_new(y(A), k(I) ? 0 : y(I)); return this.__wbg_ptr = B >>> 0, this } }; function X () { let A = { wbg: {} }; return A.wbg.__wbindgen_is_function = function (I) { return typeof e(I) == "function" }, A.wbg.__wbindgen_number_new = function (I) { return y(I) }, A.wbg.__wbindgen_object_drop_ref = function (I) { QA(I) }, A.wbg.__wbindgen_string_new = function (I, B) { return y(p(I, B)) }, A.wbg.__wbindgen_is_null = function (I) { return e(I) === null }, A.wbg.__wbindgen_number_get = function (I, B) { let g = e(B), Q = typeof g == "number" ? g : void 0; (M !== null && M.byteLength !== 0 || (M = new Float64Array(s.memory.buffer)), M)[I / 8 + 1] = k(Q) ? 0 : Q, L()[I / 4 + 0] = !k(Q) }, A.wbg.__wbg_new_16b304a2cfa7ff4a = function () { return y(new Array) }, A.wbg.__wbg_get_e3c254076557e348 = function () { return Z(function (I, B) { return y(Reflect.get(e(I), e(B))) }, arguments) }, A.wbg.__wbg_pop_69878daf7f50184d = function (I) { return y(e(I).pop()) }, A.wbg.__wbg_push_a5b05aedc7234f9f = function (I, B) { return e(I).push(e(B)) }, A.wbg.__wbg_call_b3ca7c6051f9bec1 = function () { return Z(function (I, B, g) { return y(e(I).call(e(B), e(g))) }, arguments) }, A.wbg.__wbg_length_c20a40f15020d68a = function (I) { return e(I).length }, A.wbg.__wbg_newwithlength_e9b4878cebadb3d3 = function (I) { return y(new Uint8Array(I >>> 0)) }, A.wbg.__wbg_getindex_03d06b4e7ea3475e = function (I, B) { return e(I)[B >>> 0] }, A.wbg.__wbindgen_debug_string = function (I, B) { let g = function (C, D, t) { if (t === void 0) { let w = Y.encode(C), N = D(w.length, 1) >>> 0; return J().subarray(N, N + w.length).set(w), U = w.length, N } let o = C.length, a = D(o, 1) >>> 0, c = J(), i = 0; for (; i < o; i++) { let w = C.charCodeAt(i); if (w > 127) break; c[a + i] = w } if (i !== o) { i !== 0 && (C = C.slice(i)), a = t(a, o, o = i + 3 * C.length, 1) >>> 0; let w = J().subarray(a + i, a + o); i += CA(C, w).written, a = t(a, o, i, 1) >>> 0 } return U = i, a }(l(e(B)), s.__wbindgen_malloc, s.__wbindgen_realloc), Q = U; L()[I / 4 + 1] = Q, L()[I / 4 + 0] = g }, A.wbg.__wbindgen_throw = function (I, B) { throw new Error(p(I, B)) }, A } E(X, "L"); function T (A, I) { return s = A.exports, iA.__wbindgen_wasm_module = I, M = null, R = null, n = null, s } E(T, "h"); function V (A) { if (s !== void 0) return s; let I = X(); return A instanceof WebAssembly.Module || (A = new WebAssembly.Module(A)), T(new WebAssembly.Instance(A, I), A) } E(V, "U"); async function iA (A) { if (s !== void 0) return s; A === void 0 && (A = new URL(`data:application/wasm;base64,${K("base64")}`, import.meta.url)); let I = X(); (typeof A == "string" || typeof Request == "function" && A instanceof Request || typeof URL == "function" && A instanceof URL) && (A = fetch(A)); let { instance: B, module: g } = await async function (Q, C) { if (typeof Response == "function" && Q instanceof Response) { if (typeof WebAssembly.instantiateStreaming == "function") try { return await WebAssembly.instantiateStreaming(Q, C) } catch (t) { if (Q.headers.get("Content-Type") == "application/wasm") throw t; console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", t) } let D = await Q.arrayBuffer(); return await WebAssembly.instantiate(D, C) } { let D = await WebAssembly.instantiate(Q, C); return D instanceof WebAssembly.Instance ? { instance: D, module: Q } : D } }(await A, I); return T(B, g) } E(iA, "S"); function K (A) { let I = ""; return A === "base64" ? I : new Uint8Array(Array.from(atob(I), B => B.charCodeAt(0))).buffer } E(K, "H"); V(K()); function v (A, I) { let B = h("~xml"), g = [B], Q = [], C = [], D = { root: !1 }; try { let o = new S(new TextEncoder().encode(A), typeof A == "object" ? A : void 0); j(o, Q, C, I?.mode === "html") } catch (o) { if (C.at(-1)?.[0] === G.StateParseAttribute && Q.push([G.Error, `Failed to parse attribute around position ${C.at(-1)[1]}`]), !C.length) throw new EvalError(`WASM XML parser crashed: ${o}`) } let t = Q.find(([o]) => o === G.Error); if (t) throw new SyntaxError(`Malformed XML document: ${t[1]}`); I ??= {}, I.revive ??= {}, I.revive.trim ??= !0, I.revive.entities ??= !0, I.flatten ??= {}, I.flatten.text ??= !0, I.flatten.empty ??= !0; for (let [o, a, c = a] of Q) switch (o) { case G.XMLDeclaration: { let i = c.match(/version=(["'])(?<version>1\.\d+)(\1)/)?.groups?.version; i && (B["@version"] = i); let w = c.match(/encoding=(["'])(?<encoding>[A-Za-z][-\w.]*)(\1)/)?.groups?.encoding; w && (B["@encoding"] = w); let N = c.match(/standalone=(["'])(?<standalone>yes|no)(\1)/)?.groups?.standalone; N && (B["@standalone"] = N); break } case G.XMLDoctype: { B["#doctype"] = Object.assign(h("~doctype", { parent: B }), wA(c)); break } case G.XMLInstruction: { let [i, ...w] = c.split(" "), N = Object.assign(h(i, { parent: B }), DA(w.join(" "))); switch (B["#instructions"] ??= {}, !0) { case Array.isArray(B["#instructions"][i]): B["#instructions"][i].push(N); break; case i in B["#instructions"]: B["#instructions"][i] = [B["#instructions"][i], N]; break; default: B["#instructions"][i] = N }break } case G.TagOpen: { if (g.length === 1) { if (D.root) throw new SyntaxError("Multiple root node detected"); D.root = !0 } let i = g.at(-1), w = h(a, { parent: i }); switch (!0) { case Array.isArray(i[w["~name"]]): i[w["~name"]].push(w); break; case w["~name"] in i: i[w["~name"]] = [i[w["~name"]], w]; break; default: i[w["~name"]] = w }g.push(w); break } case G.TagClose: { g.pop(); break } case G.TagAttribute: { g.at(-1)[`@${a}`] = c; break } case G.Text: { H(c, { type: "~text", parent: g.at(-1) }); break } case G.CData: { H(c, { type: "~cdata", parent: g.at(-1) }); break } case G.Comment: { H(c, { type: "~comment", parent: g.at(-1) }); break } }if (!Object.keys(B).length) throw new SyntaxError("Malformed XML document: empty document or no root node detected"); return b(B, I) } E(v, "parse"); function DA (A) { let I = {}; for (let [B, g, Q, C] of A.matchAll(/(?<name>[A-Za-z_][-\w.:]*)=(["'])(?<value>(?:(?!\2).)*)(\2)/g)) I[`@${g}`] = C; return I } E(DA, "xml_attributes"); function wA (A) { let I = {}, { attributes: B, elements: g = "" } = A.match(/^(?<attributes>[^\[]*)(?:\[(?<elements>[\s\S]*)\])?/)?.groups; A = A.replace(`[${g}]`, ""); for (let [Q, C, D] of B.matchAll(/(["'])(?<name>(?:(?!\1).)*)(\1)/g)) I[`@${D}`] = "", A = A.replace(Q, ""); A.split(/\s+/).filter(Boolean).forEach(Q => I[`@${Q}`] = ""); for (let [Q, C, D] of g.matchAll(/<!ELEMENT\s+(?<name>\w+)\s+\((?<value>[^\)]+)\)/g)) I[C] = D; return I } E(wA, "xml_doctype"); function H (A, { type: I = "~text", parent: B = null } = {}) { let g = Object.defineProperties({}, { "~parent": { enumerable: !1, writable: !1, value: B }, "~name": { enumerable: !1, writable: !1, value: I } }); return g["#text"] = A, B && B["~children"].push(g), g } E(H, "xml_text"); function h (A, { parent: I = null } = {}) { let B = Object.defineProperties({}, { "~parent": { enumerable: !1, writable: !1, value: I }, "~name": { enumerable: !1, writable: !1, value: A }, "~children": { enumerable: !1, writable: !0, value: [] }, "#text": { enumerable: !1, configurable: !0, get () { let g = this["~children"].filter(C => C["~name"] !== "~comment"); if (this["@xml:space"] !== "preserve") return g.map(C => C["#text"]).filter(Boolean).join(" "); let Q = ""; for (let C = 0; C < g.length; C++) { let D = C && +g[C - 1]["~name"].startsWith("~") ^ +g[C]["~name"].startsWith("~") && !g[C - 1]["#text"].endsWith(" ") && !g[C]["#text"].startsWith(" "); Q += `${D ? " " : ""}${g[C]["#text"]}` } return Q } }, "#comments": { enumerable: !1, configurable: !0, get () { return this["~children"].filter(g => g["~name"] === "~comment").map(g => g["#text"]) } } }); return I && I["~children"].push(B), B } E(h, "xml_node"); function b (A, I) { A["~name"] === "~xml" && (I?.clean?.doctype && delete A["#doctype"], I?.clean?.instructions && (A["~children"] = A["~children"].filter(g => !(g["~name"] in (A["#instructions"] ?? {}))), delete A["#instructions"])), A["~children"] && (I?.clean?.comments && (A["~children"] = A["~children"].filter(g => g["~name"] !== "~comment")), I?.revive?.trim && A["~children"].forEach(g => /^~(?:text|cdata|comment)$/.test(g["~name"]) ? g["#text"] = m(g, "#text", { revive: { trim: A["@xml:space"] !== "preserve" } }) : null), A["~children"].some(g => /^~(?:text|cdata)$/.test(g["~name"]) && g["#text"].trim().length + (A["@xml:space"] === "preserve" ? 1 : 0) * g["#text"].length) && Object.defineProperty(A, "#text", { enumerable: !0, configurable: !0 }), A["~children"].some(g => g["~name"] === "~comment") && Object.defineProperty(A, "#comments", { enumerable: !0, configurable: !0 })); for (let [g, Q] of Object.entries(A)) if (g !== "#comments") { if (I?.clean?.attributes && g.startsWith("@")) { delete A[g]; continue } if (g.startsWith("@")) { A[g] = m(A, g, I), A[g] === void 0 && delete A[g]; continue } Array.isArray(Q) ? A[g] = Object.defineProperties(Q.map(C => b(C, I)), { "~parent": { enumerable: !1, writable: !1, value: A }, "~name": { enumerable: !1, writable: !1, value: g } }) : typeof Q == "object" && Q && (A[g] = b(Q, I)), A[g] === void 0 && delete A[g] } let B = Object.keys(A); if (B.includes("#text")) { let g = { ...I, revive: { ...I?.revive, trim: I?.revive?.trim && A["@xml:space"] !== "preserve" } }; Object.defineProperty(A, "#text", { enumerable: !0, configurable: !0, value: m(A, "#text", g) }) } if (!(I?.revive?.custom && I.revive.custom({ name: A["~name"], key: null, value: null, node: A }) === void 0)) { if (I?.flatten?.text && B.length === 1 && B.includes("#text")) return A["#text"]; if (I?.flatten?.attributes && B.length && B.every(g => g.startsWith("@"))) { for (let g of B) A[g.slice(1)] = A[g], delete A[g]; return A } return B.length ? A : I?.flatten?.empty ? null : I?.flatten?.text ? "" : Object.defineProperty(A, "#text", { enumerable: !0, configurable: !0, value: "" }) } } E(b, "postprocess"); var oA = { "&lt;": "<", "&gt;": ">", "&apos;": "'", "&quot;": '"', "&amp;": "&" }; function m (A, I, B) { let g = A[I]; if (B?.revive?.trim && (g = g.trim()), B?.revive?.entities) { g = g.replaceAll(/&#(?<hex>x?)(?<code>\d+);/g, (Q, C, D) => String.fromCharCode(Number.parseInt(D, C ? 16 : 10))); for (let [Q, C] of Object.entries(oA)) g = g.replaceAll(Q, C) } return B?.revive?.numbers && g.length && Number.isFinite(Number(g)) && !(A["~name"] === "~xml" && I === "@version") && (g = Number(g)), B?.revive?.booleans && /^(?:[Tt]rue|[Ff]alse)$/.test(g) && (g = /^[Tt]rue$/.test(g)), B?.revive?.custom ? B.revive.custom({ name: A["~name"], key: I, value: g, node: A }) : g } E(m, "revive"); var d = Symbol("internal"); function O (A, I) { I ??= {}, I.format ??= {}, I.format.indent ??= "  ", I.format.breakline ??= 128; let B = I, g = ""; if (g += aA(A, B), A["#instructions"]) for (let D of Object.values(A["#instructions"])) for (let t of [D].flat()) g += $(t, B); A["#doctype"] && (g += tA(A["#doctype"], B)); let [Q, ...C] = f(A, B); if (!Q) throw new SyntaxError("No root node detected"); if (C.length) throw new SyntaxError("Multiple root node detected"); return g += AA(Q, { ...B, depth: 0 }), g.trim() } E(O, "stringify"); function _ (A) { return { "~name": "~cdata", "#text": A } } E(_, "cdata"); function P (A) { return { "~name": "~comment", "#text": A } } E(P, "comment"); function aA (A, I) { return A["~name"] ??= "xml", $(A, I) } E(aA, "xml_prolog"); function $ (A, { format: { indent: I } }) {
  let B = "", g = q(A, arguments[1]); if (g.length) {
    B += `<?${A["~name"].replace(/^~/, "")}`; for (let [Q, C] of g) B += ` ${Q}="${C}"`; B += `?>${I ? `
`: ""}`
  } return B
} E($, "xml_instruction"); function tA (A, { format: { indent: I } }) {
  let B = "", g = q(A, arguments[1]), Q = f(A, arguments[1]); if (g.length + Q.length) {
    B += "<!DOCTYPE"; for (let [C] of g) B += ` ${/^[A-Za-z0-9_]+$/.test(C) ? C : `"${C}"`}`; if (Q.length) {
      B += `${I ? `
${I}` : " "}[${I ? `
`: ""}`; for (let C of Q) B += `${I}<!ELEMENT ${C["~name"]} (${C["#text"]})>${I ? `
`: ""}`; B += `${I || ""}]${I ? `
`: ""}`
    } B += `>${I ? `
`: ""}`
  } return B
} E(tA, "xml_doctype"); function AA (A, { format: { breakline: I = 0, indent: B = "" }, replace: g, depth: Q = 0 }) {
  if (g?.custom && g.custom({ name: A["~name"], key: null, value: null, node: A }) === void 0) return ""; let C = `${B.repeat(Q)}<${A["~name"]}`, D = q(A, arguments[1]), t = f(A, arguments[1]), o = A["@xml:space"] === "preserve"; for (let [a, c] of D) C += ` ${a}="${c}"`; if (t.length || "#text" in A && A["#text"].length) {
    let a = B && !o && (t.length || A["#text"].length > I - B.length * Q); C += `>${B && !o && t.length ? `
`: ""}`, "#text" in A && (a && (C += `
${B.repeat(Q + 1)}`), C += A["#text"], a && (C += `
`)); for (let c of t) C += AA(c, { ...arguments[1], depth: Q + 1 }); a && (C += B.repeat(Q)), C += `</${A["~name"]}>${B ? `
`: ""}`
  } else C += `/>${B ? `
`: ""}`; return C
} E(AA, "xml_node"); function f (A, I) { return Object.keys(A).filter(g => /^[A-Za-z_]/.test(g)).flatMap(g => [A[g]].flat().map(Q => { switch (!0) { case Q === null: return { "~name": g, "#text": "" }; case typeof Q == "object": { let C = { ...Q, "~name": g }; return Q["~name"]?.startsWith("~") && (C[d] = Q["~name"]), C } default: return { "~name": g, "#text": `${Q}` } } })).map(g => { if ("#text" in g) { let Q = g[d] === "~cdata", C = g[d] === "~comment"; g["#text"] = IA(g, "#text", { ...I, escape: Q ? [] : ["<", ">"] }), g["#text"] === void 0 ? delete g["#text"] : g["#text"] = Q ? `<![CDATA[${g["#text"]}]]>` : C ? `<!--${g["#text"]}-->` : `${g["#text"]}` } return g }) } E(f, "xml_children"); function q (A, I) { return Object.entries(A).filter(([B]) => B.startsWith("@")).map(([B]) => [B.slice(1), IA(A, B, { ...I, escape: ['"', "'"] })]).filter(([B, g]) => g !== void 0) } E(q, "xml_attributes"); var z = { "&": "&amp;", '"': "&quot;", "<": "&lt;", ">": "&gt;", "'": "&apos;" }; function IA (A, I, B) { let g = `${A[I]}`; if (B?.escape) { B?.replace?.entities && (B.escape = Object.keys(z)); for (let Q of B?.escape) g = `${g}`.replaceAll(Q, z[Q]) } return B?.replace?.custom ? B.replace.custom({ name: A["~name"], key: I, value: g, node: A }) : g } E(IA, "replace"); var { default: gA, ...sA } = x, YA = gA !== void 0 ? gA : sA; export { _ as cdata, P as comment, YA as default, v as parse, O as stringify };
//# sourceMappingURL=mod.ts.js.map
